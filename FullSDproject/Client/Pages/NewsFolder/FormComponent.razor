@inject HttpClient _client

<EditForm Model="@news" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Game: </label>
            <div>
                <InputSelect @bind-Value="news.GameID" class="form-control">
                    <option value="">-- Select Name --</option>
                    @if (Games != null)
                    {
                        foreach (var game in Games)
                        {
                            <option value="@game.Id">@game.Title</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => news.GameID)" />
            </div>
        </div>

        <div class="form-group">
            <label>Writer: </label>
            <div>
                <InputText @bind-Value="@news.Writer" class="form-control" />
                <ValidationMessage For="@(() => news.Writer)" />
            </div>
        </div>

        <div class="form-group">
            <label>News Entry: </label>
            <div>
                <InputText @bind-Value="@news.NewsEntry" class="form-control" />
                <ValidationMessage For="@(() => news.NewsEntry)" />
            </div>
        </div>

    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="news-page" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public News news { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Game> Games;

    protected async override Task OnInitializedAsync()
    {
        Games = await _client.GetFromJsonAsync<List<Game>>("api/games");
    }
}