@page "/store"
@inject NavigationManager NavManager
@inject HttpClient _client
@inject IJSRuntime js
@* Error handling *@
@inject HttpInterceptorService _interceptor
@implements IDisposable

<h1>Store</h1>
<button class="btn btn-primary" @onclick="ToCart">Go to cart</button>

@if (Games == null)
{
    <div class="alert alert-info">Loading Games...</div>
}
else
{
    //Below is the container for the different games.
    <table class="table table-responsive" id="StoreTable">
        <thead>
            <tr>
                <th>Thumbnail</th>
                <th>Title</th>
                <th>Price</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var game in Games)
            {
                <tr>
                    <td><img class="card-img-top" src="pictures/@game.Thumbnail"></td>
                    <td>@game.Title</td>
                    <td>@(game.Price.ToString("C"))</td>
                    <td>
                        
                        <a href="/games/view/@game.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/games/edit/@game.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        
                        <button class="btn btn-danger" @onclick="@(()=>Delete(game.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                        
                    </td>
                </tr>
             }
        </tbody>
    </table>
}

        <hr />
        <footer>&copy The Cyclosion 2021-2022</footer>
@code {
    private void ToCart()
    {
        NavManager.NavigateTo("/cart");
    }

    private List<Game> Games;

    protected override async Task OnInitializedAsync()
    {
        //error handling
        _interceptor.MonitorEvent();
        //line break
        Games = await _client.GetFromJsonAsync<List<Game>>("api/games");
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable","#StoreTable");
    }

    //error handling
    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#StoreTable");
    }
    async Task Delete(int gameid)
    {
        var game = Games.First(q => q.Id == gameid);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {game.Title}");
        if (confirm)
        {
            await _client.DeleteAsync($"api/games/{gameid}");
            await OnInitializedAsync();
        }
    }
    }
